/* Pseudo-classes(:) enable you to target an element when it's in a particular state, 
as if you had added a class for that state to the DOM. Pseudo-elements(::) act as if 
you had added a whole new element to the DOM, and enable you to style that. */
*, *::after, *::before {
    /* If you set an element's width to 100 pixels, 
    that 100 pixels will include any border or padding you added, 
    and the content box will shrink to absorb that extra width. */
    box-sizing: border-box;
}

body {
    margin: 0;
    background-color: var(--background-color);
    overflow: hidden;
}

/* declaring global css variables */
/* same as the html selector but with a higher specificity */
:root {
   --hue: 200;
   --saturation: 50%;
   /* differentiate the foreground and background colors by changing their lightness */
   --foreground-color: hsl(var(--hue), var(--saturation), 75%);
   --background-color: hsl(var(--hue), var(--saturation), 20%);
}

.paddle {
    --position: 50;
    /* It is positioned relative to its closest positioned(non-static) ancestor, if any; 
    otherwise, it is placed relative to the initial containing block(the html element).
    In this case, the containing block is the edge of the padding from the html element. */
    position: absolute;
    background-color: var(--foreground-color);
    /* moves the top of both paddles down by 50% by accessing the position variable*/
    /* calc takes the position variable and multiplies it by 1vh to get 50vh */
    /* it cannot be written as var(--position)vh */
    /* 1vh means 1% of the viewport's height. */
    top: calc(var(--position) * 1vh);
    /* makes the width looks good on all screen sizes */
    width: 1vh;
    height: 10vh;
    /* translateY with a negative value moves the element up by 50% of its length*/
    transform: translateY(-50%);
}

.paddle.left {
    /* 1vw takes up 1% of the viewport width, 
    which means it is based on screen size,
    while percentages are based on their parents  */
    left: 1vw;
}

.paddle.right {
    right: 1vw;
}  

.ball {
    --x: 50;
    --y: 50;

    position: absolute;
    background-color: var(--foreground-color);

    /* coordinates of the ball */
    top: calc(var(--y) * 1vh);
    left: calc(var(--x) * 1vw);

    /* https://9elements.com/blog/css-border-radius/ */
    border-radius: 50%;

    /* fully center the ball */
    transform: translate(-50%,-50%);
    width: 2.5vh;
    height: 2.5vh;
}

.score {
    display: flex;
    /* center the child elements of score along the main axis(horizontal) */
    justify-content: center;
    font-weight: bold;
    font-size: 7vh;
    color: var(--foreground-color);
}


/* child combinator (>) selects all direct children of the parent element. */
.score > * {
    /* each child element will grow and fill the available space using the same amount of extra spaces*/
    flex-grow: 1;
    /* the basis that the flex elements will grow or shrink on.
    in this case, each elements grow from 0px to half the width of score.
    |<-0px->||<-0px->| to |1/4extra space, 0px, 1/4extra space||1/4extra space, 0px, 1/4extra space| */
    flex-basis: 0;
    padding: 0 2vh;
    margin: 1vh 0;
    opacity: .5;
}

.score > :first-child {
    /* align the first child to the right and use a vertical border to separate the two scores */
    text-align: right;
    border-right: .5vh solid var(--foreground-color);
}